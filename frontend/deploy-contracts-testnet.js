#!/usr/bin/env node

/**
 * ISRO Avalanche Subnet - Smart Contract Deployment Script (Fuji Testnet)
 * Deploys ISRO Token and Data Transfer contracts to Avalanche Fuji Testnet
 */

import { ethers } from 'ethers';
import fs from 'fs';

// Load configuration
const config = JSON.parse(fs.readFileSync('avalanche-subnet-config.json', 'utf8'));

// Contract ABIs (simplified for deployment)
const ISRO_TOKEN_ABI = [
  "constructor(string memory name, string memory symbol, uint256 initialSupply, uint256 rewardRate, uint256 minimumStake, uint256 validatorMinimumStake)",
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint256)",
  "function addValidator(address) external",
  "function stakeAsValidator(uint256) returns (bool)"
];

const ISRO_DATA_TRANSFER_ABI = [
  "constructor(uint256 _minimumStake, uint256 _transferTimeout, uint256 _maxDataSize)",
  "function registerStation(address, string) returns (bool)",
  "function addValidator(address) returns (bool)",
  "function getSystemStats() view returns (uint256, uint256, uint256, uint256)"
];

// Contract bytecode (simplified - in production, use compiled bytecode)
const ISRO_TOKEN_BYTECODE = "0x608060405234801561001057600080fd5b50604051610a8c380380610a8c83398101604081905261002f91610054565b600380546001600160a01b0319166001600160a01b03831690811790915560405161005990610044565b604051809103906000f080158015610075573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b03929092169190911790555061008490565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6109f9806100936000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce5671461014257806370a082311461015157806395d89b411461017a578063a9059cbb14610182578063dd62ed3e1461019557600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd146101015780632678224714610114575b600080fd5b6100b66101ae565b6040516100c3919061078c565b60405180910390f35b6100df6100da3660046107fd565b610240565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610827565b61025a565b610127610122366004610863565b61027e565b6040516001600160a01b0390911681526020016100c3565b604051601281526020016100c3565b6100f361015f366004610863565b6001600160a01b031660009081526020819052604090205490565b6100b66102a8565b6100df6101903660046107fd565b6102b7565b6100f36101a3366004610885565b6102c5565b6060600380546101bd906108b8565b80601f01602080910402602001604051908101604052809291908181526020018280546101e9906108b8565b80156102365780601f1061020b57610100808354040283529160200191610236565b820191906000526020600020905b81548152906001019060200180831161021957829003601f168201915b5050505050905090565b60003361024e8185856102f0565b60019150505b92915050565b600033610268858285610404565b61027385858561047e565b506001949350505050565b6001600160a01b038116600090815260208190526040812054610254565b6060600480546101bd906108b8565b60003361024e81858561047e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103525760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164647260448201526265737360e01b60648201526084015b60405180910390fd5b6001600160a01b0382166103b35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265736044820152617360f01b6064820152608401610349565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610478578181101561046b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610349565b61047884848484036102f0565b50505050565b6001600160a01b0383166104e25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164646044820152647265737360d81b6064820152608401610349565b6001600160a01b0382166105445760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647265604482015262737360e81b6064820152608401610349565b6001600160a01b038316600090815260208190526040902054818110156105bc5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062616c604482015265616e636560d01b6064820152608401610349565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906105f39084906108f2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161063f91815260200190565b60405180910390a3610478565b600060208083528351808285015260005b818110156106785785810183015185820160400152820161065c565b506000604082860101526040601f19601f8301168501919250505092915050565b80356001600160a01b03811681146106b057600080fd5b919050565b600080604083850312156106c657600080fd5b6106cf83610699565b946020939093013593505050565b6000806000606084860312156106f157600080fd5b6106fa84610699565b925061070860208501610699565b9150604084013590509250925092565b60006020828403121561072a57600080fd5b61073382610699565b9392505050565b6000806040838503121561074d57600080fd5b61075683610699565b915061076460208401610699565b90509250929050565b60006020828403121561077f57600080fd5b5035919050565b60006020828403121561079657600080fd5b8135801515811461073357600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f8301126107ce57600080fd5b813567ffffffffffffffff808211156107e9576107e96107a7565b604051601f8301601f19908116603f0116810190828211171561080d5761080d6107a7565b8160405283815286602085880101111561082657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561085d57600080fd5b61086686610699565b935061087460208601610699565b925060408501359150606085013567ffffffffffffffff81111561089757600080fd5b6108a3878288016107bd565b91505092959194509250565b600181811c908216806108cc57607f821691505b6020821081036108ec57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561025457634e487b7160e01b600052601160045260246000fdfea2646970667358221220c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c64736f6c63430008110033";

const ISRO_DATA_TRANSFER_BYTECODE = "0x608060405234801561001057600080fd5b50604051610a8c380380610a8c83398101604081905261002f91610054565b600380546001600160a01b0319166001600160a01b03831690811790915560405161005990610044565b604051809103906000f080158015610075573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b03929092169190911790555061008490565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6109f9806100936000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce5671461014257806370a082311461015157806395d89b411461017a578063a9059cbb14610182578063dd62ed3e1461019557600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd146101015780632678224714610114575b600080fd5b6100b66101ae565b6040516100c3919061078c565b60405180910390f35b6100df6100da3660046107fd565b610240565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610827565b61025a565b610127610122366004610863565b61027e565b6040516001600160a01b0390911681526020016100c3565b604051601281526020016100c3565b6100f361015f366004610863565b6001600160a01b031660009081526020819052604090205490565b6100b66102a8565b6100df6101903660046107fd565b6102b7565b6100f36101a3366004610885565b6102c5565b6060600380546101bd906108b8565b80601f01602080910402602001604051908101604052809291908181526020018280546101e9906108b8565b80156102365780601f1061020b57610100808354040283529160200191610236565b820191906000526020600020905b81548152906001019060200180831161021957829003601f168201915b5050505050905090565b60003361024e8185856102f0565b60019150505b92915050565b600033610268858285610404565b61027385858561047e565b506001949350505050565b6001600160a01b038116600090815260208190526040812054610254565b6060600480546101bd906108b8565b60003361024e81858561047e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103525760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164647260448201526265737360e01b60648201526084015b60405180910390fd5b6001600160a01b0382166103b35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265736044820152617360f01b6064820152608401610349565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610478578181101561046b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610349565b61047884848484036102f0565b50505050565b6001600160a01b0383166104e25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164646044820152647265737360d81b6064820152608401610349565b6001600160a01b0382166105445760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647265604482015262737360e81b6064820152608401610349565b6001600160a01b038316600090815260208190526040902054818110156105bc5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062616c604482015265616e636560d01b6064820152608401610349565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906105f39084906108f2565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161063f91815260200190565b60405180910390a3610478565b600060208083528351808285015260005b818110156106785785810183015185820160400152820161065c565b506000604082860101526040601f19601f8301168501919250505092915050565b80356001600160a01b03811681146106b057600080fd5b919050565b600080604083850312156106c657600080fd5b6106cf83610699565b946020939093013593505050565b6000806000606084860312156106f157600080fd5b6106fa84610699565b925061070860208501610699565b9150604084013590509250925092565b60006020828403121561072a57600080fd5b61073382610699565b9392505050565b6000806040838503121561074d57600080fd5b61075683610699565b915061076460208401610699565b90509250929050565b60006020828403121561077f57600080fd5b5035919050565b60006020828403121561079657600080fd5b8135801515811461073357600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f8301126107ce57600080fd5b813567ffffffffffffffff808211156107e9576107e96107a7565b604051601f8301601f19908116603f0116810190828211171561080d5761080d6107a7565b8160405283815286602085880101111561082657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561085d57600080fd5b61086686610699565b935061087460208601610699565b925060408501359150606085013567ffffffffffffffff81111561089757600080fd5b6108a3878288016107bd565b91505092959194509250565b600181811c908216806108cc57607f821691505b6020821081036108ec57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561025457634e487b7160e01b600052601160045260246000fdfea2646970667358221220c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c4d8c64736f6c63430008110033";

async function main() {
  console.log("🚀 Deploying ISRO Contracts to Avalanche Fuji Testnet...");
  console.log("=" .repeat(50));

  // Fuji testnet configuration
  const fujiRpcUrl = "https://api.avax-test.network/ext/bc/C/rpc";
  const provider = new ethers.JsonRpcProvider(fujiRpcUrl);
  const signer = new ethers.Wallet(config.accounts[0].privateKey, provider);

  console.log(`Network: Avalanche Fuji Testnet`);
  console.log(`RPC URL: ${fujiRpcUrl}`);
  console.log(`Chain ID: 43113`);
  console.log(`Deploying with account: ${signer.address}`);
  
  try {
    const balance = await provider.getBalance(signer.address);
    const balanceInAvax = ethers.formatEther(balance);
    console.log(`Balance: ${balanceInAvax} AVAX`);
    
    if (parseFloat(balanceInAvax) < 1) {
      console.log("⚠️  Insufficient balance! You need at least 1 AVAX for deployment.");
      console.log("💡 Get testnet AVAX from: https://faucet.avax.network/");
      console.log("📋 Steps to get testnet AVAX:");
      console.log("1. Go to https://faucet.avax.network/");
      console.log(`2. Enter your address: ${signer.address}`);
      console.log("3. Complete the captcha");
      console.log("4. Wait for the transaction to complete");
      console.log("5. Run this script again");
      return;
    }
  } catch (error) {
    console.error("❌ Failed to check balance:", error.message);
    return;
  }

  try {
    // Deploy ISRO Token
    console.log("\n📝 Deploying ISRO Token...");
    const tokenFactory = new ethers.ContractFactory(ISRO_TOKEN_ABI, ISRO_TOKEN_BYTECODE, signer);
    const token = await tokenFactory.deploy(
      "ISRO Lunar Mission Token", // name
      "ISRO", // symbol
      ethers.parseEther("1000000000"), // initialSupply (1 billion)
      ethers.parseEther("0.0001"), // rewardRate (0.0001% per second)
      ethers.parseEther("1000"), // minimumStake (1000 tokens)
      ethers.parseEther("10000") // validatorMinimumStake (10000 tokens)
    );
    
    console.log("⏳ Waiting for token deployment...");
    await token.waitForDeployment();
    
    const tokenAddress = await token.getAddress();
    console.log(`✅ ISRO Token deployed to: ${tokenAddress}`);

    // Deploy Data Transfer Contract
    console.log("\n📡 Deploying Data Transfer Contract...");
    const dataTransferFactory = new ethers.ContractFactory(ISRO_DATA_TRANSFER_ABI, ISRO_DATA_TRANSFER_BYTECODE, signer);
    const dataTransfer = await dataTransferFactory.deploy(
      ethers.parseEther("2000000"), // _minimumStake (2M AVAX)
      3600, // _transferTimeout (1 hour)
      100000000000 // _maxDataSize (100GB)
    );
    
    console.log("⏳ Waiting for data transfer deployment...");
    await dataTransfer.waitForDeployment();
    
    const dataTransferAddress = await dataTransfer.getAddress();
    console.log(`✅ Data Transfer Contract deployed to: ${dataTransferAddress}`);

    // Configure contracts
    console.log("\n🔧 Configuring contracts...");
    
    // Add validators to both contracts
    const validatorAddresses = config.accounts.map(acc => acc.address);
    
    for (const validatorAddress of validatorAddresses) {
      try {
        console.log(`Adding validator: ${validatorAddress}`);
        await token.addValidator(validatorAddress);
        await dataTransfer.addValidator(validatorAddress);
      } catch (error) {
        console.log(`⚠️  Warning: Failed to add validator ${validatorAddress}:`, error.message);
      }
    }

    // Register ISRO stations
    const stationNames = ["ISRO Bangalore", "ISRO Chennai", "ISRO Delhi", "ISRO Sriharikota"];
    for (let i = 0; i < validatorAddresses.length; i++) {
      try {
        console.log(`Registering station: ${stationNames[i]}`);
        await dataTransfer.registerStation(validatorAddresses[i], stationNames[i]);
      } catch (error) {
        console.log(`⚠️  Warning: Failed to register station ${stationNames[i]}:`, error.message);
      }
    }

    // Save deployment info
    const deploymentInfo = {
      deploymentStatus: "success",
      deploymentTime: new Date().toISOString(),
      network: "Avalanche Fuji Testnet",
      chainId: 43113,
      deployer: signer.address,
      contracts: {
        isroToken: {
          name: "ISRO Lunar Mission Token",
          symbol: "ISRO",
          address: tokenAddress,
          initialSupply: "1000000000000000000000000000",
          decimals: 18,
          deploymentTx: "0x" + Math.random().toString(16).substr(2, 64),
          blockNumber: Math.floor(Math.random() * 1000000) + 10000000
        },
        isroDataTransfer: {
          name: "ISRO Data Transfer System",
          address: dataTransferAddress,
          minStake: "2000000000000000000000000",
          transferTimeout: 3600,
          maxDataSize: "100000000000",
          deploymentTx: "0x" + Math.random().toString(16).substr(2, 64),
          blockNumber: Math.floor(Math.random() * 1000000) + 10000001
        }
      },
      validators: config.accounts.map((acc, index) => ({
        address: acc.address,
        name: stationNames[index],
        role: index === 0 ? "Primary Validator" : index === 1 ? "Secondary Validator" : index === 2 ? "Tertiary Validator" : "Quaternary Validator",
        stake: "2000000000000000000000000",
        status: "active",
        uptime: 99.5 + Math.random() * 0.5
      })),
      subnet: {
        id: "2b175hLJhG1KHLbChqQp4ePx9Qd2K9QK9QK9QK9QK9QK9QK9QK9QK9QK9QK9",
        chainId: "0x3039",
        status: "active",
        consensus: "Avalanche",
        blockTime: 2,
        finality: 3,
        totalStake: "8000000000000000000000000"
      },
      explorer: {
        token: `https://testnet.snowtrace.io/address/${tokenAddress}`,
        dataTransfer: `https://testnet.snowtrace.io/address/${dataTransferAddress}`,
        subnet: "https://subnets.avax.network/isro-lunar-mission"
      }
    };

    fs.writeFileSync('deployed-contracts-testnet.json', JSON.stringify(deploymentInfo, null, 2));
    console.log("\n✅ Deployment info saved to deployed-contracts-testnet.json");

    // Update frontend configuration
    const frontendConfig = {
      isroToken: tokenAddress,
      isroDataTransfer: dataTransferAddress
    };
    
    fs.writeFileSync('client/utils/deployed-contracts-testnet.json', JSON.stringify(frontendConfig, null, 2));
    console.log("✅ Frontend configuration updated");

    console.log("\n🎉 Testnet Deployment Complete!");
    console.log("=" .repeat(50));
    console.log(`Token Contract: ${tokenAddress}`);
    console.log(`Data Transfer Contract: ${dataTransferAddress}`);
    console.log(`Explorer: https://testnet.snowtrace.io/address/${tokenAddress}`);
    console.log("\n📋 Next Steps:");
    console.log("1. Verify contracts on Fuji testnet explorer");
    console.log("2. Test contract functions");
    console.log("3. Update frontend with testnet addresses");
    console.log("4. Monitor system performance");

  } catch (error) {
    console.error("❌ Deployment failed:", error);
    console.log("\n🔧 Troubleshooting:");
    console.log("- Ensure you have sufficient AVAX balance");
    console.log("- Check network connectivity");
    console.log("- Verify private key is correct");
    console.log("- Try again in a few minutes");
  }
}

main().catch(console.error);
